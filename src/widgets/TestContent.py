# **************************************************************************************************
# @file TestContent.py
# @brief Content of the CollapsileBox for the test mode. 
#
# @project   VVToolkit
# @version   1.0
# @date      2024-08-04
# @author    @dabecart
#
# @license
# This project is licensed under the MIT License - see the LICENSE file for details.
# **************************************************************************************************

from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel, 
                            QTextEdit, QComboBox, QLineEdit)
from PyQt6.QtCore import Qt

from DataFields import Item
from widgets.CodeTextField import CodeTextField

class TestContent(QWidget):
    def __init__(self, item : Item, parent = None) -> None:
        super().__init__(parent)

        self.item = item
        self.parent = parent

        contentLayout = QVBoxLayout(self)
        contentLayout.setAlignment(Qt.AlignmentFlag.AlignTop)

        inputCommandLabel = QLabel("Input:")
        self.inputCmdText = CodeTextField()
        self.inputCmdText.setReadOnly(True)
        self.inputCmdText.setText(self.item.runcode)
        self.inputCmdText.setStatusTip("The code that runs for this test case.")
        
        outputCommandLabel = QLabel("Original output:")
        self.outputCmdIndexCombo = QComboBox()
        self.outputCmdIndexCombo.setStatusTip("Select which of the iterations to show.")
        self.outputCmdIndexCombo.setPlaceholderText("None")
        self.outputCmdIndexCombo.setMinimumHeight(30)
        self.outputCmdIndexCombo.setMinimumWidth(self.outputCmdIndexCombo.sizeHint().width() + 16)
        self.outputCmdIndexCombo.addItems([str(i) for i in range(self.item.repetitions)])
        if self.item.hasBeenRun():
            self.outputCmdIndexCombo.setCurrentIndex(0)
        else:
            self.outputCmdIndexCombo.setCurrentIndex(-1)
            self.outputCmdIndexCombo.setEnabled(False)
        self.outputCmdIndexCombo.currentTextChanged.connect(self.onOutputCmdIndexChanged)
        self.outputReturnValue = QLabel("")

        outputHeader = QWidget()
        outputHeaderLayout = QHBoxLayout(outputHeader)
        outputHeaderLayout.setContentsMargins(0,0,0,0)
        outputHeaderLayout.addWidget(outputCommandLabel)
        outputHeaderLayout.addWidget(self.outputCmdIndexCombo)
        outputHeaderLayout.addStretch()
        outputHeaderLayout.addWidget(self.outputReturnValue)

        self.outputCmdText = QTextEdit()
        self.outputCmdText.setStatusTip('The original output generated by this test case.')
        self.outputCmdText.setReadOnly(True)

        checkModeLabel = QLabel(f"Checking Mode: {self.item.validationCmd.toString()}")

        testOutputCommandLabel = QLabel("Test output:")
        self.testOutputReturnValue = QLabel("")

        testOutputHeader = QWidget()
        testOutputHeaderLayout = QHBoxLayout(testOutputHeader)
        testOutputHeaderLayout.setContentsMargins(0,0,0,0)
        testOutputHeaderLayout.addWidget(testOutputCommandLabel)
        testOutputHeaderLayout.addStretch()
        testOutputHeaderLayout.addWidget(self.testOutputReturnValue)

        self.testOutputCmdText = QTextEdit()
        self.testOutputCmdText.setStatusTip('The output generated by this test case.')
        self.testOutputCmdText.setReadOnly(True)
        self.updateReturnValues(0)

        contentLayout.addWidget(inputCommandLabel)
        contentLayout.addWidget(self.inputCmdText)
        contentLayout.addWidget(outputHeader)
        contentLayout.addWidget(self.outputCmdText)
        contentLayout.addWidget(checkModeLabel)
        contentLayout.addWidget(testOutputHeader)
        contentLayout.addWidget(self.testOutputCmdText)

    def updateReturnValues(self, index):
        # This will update the text on the output cmds.
        if self.item.hasBeenRun():
            self.outputCmdText.setText(self.item.result[index].output)
            self.outputReturnValue.setText(f"Return: {self.item.result[index].returnCode}\nExecution time: {self.item.result[index].executionTime:.2f} ms")
        
        if self.item.hasBeenTested():
            self.testOutputCmdText.setText(self.item.testOutput[index].output)
            self.testOutputReturnValue.setText(f"Return: {self.item.testOutput[index].returnCode}\nExecution time: {self.item.testOutput[index].executionTime:.2f} ms")

    def isUpdated(self):
        # Legacy code to match BuildContent.py
        return True
    
    def onOutputCmdIndexChanged(self, text):
        try:
            index = int(text)
        except ValueError:
            return
        
        self.updateReturnValues(index)